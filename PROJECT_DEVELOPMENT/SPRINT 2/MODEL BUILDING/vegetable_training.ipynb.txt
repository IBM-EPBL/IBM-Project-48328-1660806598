{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "24c7025c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ed540c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_datagen = ImageDataGenerator(rescale = 1./255,shear_range = 0.2,zoom_range = 0.2,horizontal_flip = True)\n",
    "test_datagen = ImageDataGenerator(rescale = 1./255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "875f83ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 11386 images belonging to 9 classes.\n",
      "Found 3416 images belonging to 9 classes.\n"
     ]
    }
   ],
   "source": [
    "x_train = train_datagen.flow_from_directory('C:\\\\Users\\\\SMTEC\\\\Desktop\\\\Brahmani_Project_Build_A_Thon\\\\Brahmani_Project_Build_A_Thon\\\\Dataset Plant Disease\\\\Veg-dataset\\\\Veg-dataset\\\\train_set',target_size = (128,128),batch_size=16,class_mode = 'categorical')\n",
    "x_test = test_datagen.flow_from_directory('C:\\\\Users\\\\SMTEC\\\\Desktop\\\\Brahmani_Project_Build_A_Thon\\\\Brahmani_Project_Build_A_Thon\\\\Dataset Plant Disease\\\\Veg-dataset\\\\Veg-dataset\\\\test_set',target_size = (128,128),batch_size=16,class_mode = 'categorical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9a94406f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Pepper,_bell___Bacterial_spot': 0,\n",
       " 'Pepper,_bell___healthy': 1,\n",
       " 'Potato___Early_blight': 2,\n",
       " 'Potato___Late_blight': 3,\n",
       " 'Potato___healthy': 4,\n",
       " 'Tomato___Bacterial_spot': 5,\n",
       " 'Tomato___Late_blight': 6,\n",
       " 'Tomato___Leaf_Mold': 7,\n",
       " 'Tomato___Septoria_leaf_spot': 8}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.class_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f5378c70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Pepper,_bell___Bacterial_spot': 0,\n",
       " 'Pepper,_bell___healthy': 1,\n",
       " 'Potato___Early_blight': 2,\n",
       " 'Potato___Late_blight': 3,\n",
       " 'Potato___healthy': 4,\n",
       " 'Tomato___Bacterial_spot': 5,\n",
       " 'Tomato___Late_blight': 6,\n",
       " 'Tomato___Leaf_Mold': 7,\n",
       " 'Tomato___Septoria_leaf_spot': 8}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.class_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "692338f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Convolution2D\n",
    "from keras.layers import MaxPooling2D\n",
    "from keras.layers import Flatten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b5c97e9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c02f6390",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Convolution2D(32,(3,3),input_shape=(128,128,3),activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "74caaa9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(MaxPooling2D(pool_size=(2,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ea5637a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b6bda1a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(300,activation='relu'))\n",
    "model.add(Dense(150,activation='relu'))\n",
    "model.add(Dense(75,activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dd51e96a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(9,activation = 'softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e596e11a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c6d4656e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 126, 126, 32)      896       \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 63, 63, 32)       0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 127008)            0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 9)                 1143081   \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 300)               3000      \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 150)               45150     \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 75)                11325     \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 300)               22800     \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 150)               45150     \n",
      "                                                                 \n",
      " dense_6 (Dense)             (None, 75)                11325     \n",
      "                                                                 \n",
      " dense_7 (Dense)             (None, 9)                 684       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1,283,411\n",
      "Trainable params: 1,283,411\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ff925daa",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SMTEC\\AppData\\Local\\Temp/ipykernel_11012/174847055.py:1: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
      "  model.fit_generator(x_train,steps_per_epoch=89,epochs=20,validation_data=x_test,validation_steps=27)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "89/89 [==============================] - 50s 512ms/step - loss: 2.1113 - accuracy: 0.1819 - val_loss: 2.0918 - val_accuracy: 0.2106\n",
      "Epoch 2/20\n",
      "89/89 [==============================] - 48s 531ms/step - loss: 2.0814 - accuracy: 0.1671 - val_loss: 2.0583 - val_accuracy: 0.1829\n",
      "Epoch 3/20\n",
      "89/89 [==============================] - 43s 484ms/step - loss: 2.0658 - accuracy: 0.1812 - val_loss: 2.0914 - val_accuracy: 0.1713\n",
      "Epoch 4/20\n",
      "89/89 [==============================] - 41s 458ms/step - loss: 2.0846 - accuracy: 0.1833 - val_loss: 2.0669 - val_accuracy: 0.2130\n",
      "Epoch 5/20\n",
      "89/89 [==============================] - 43s 478ms/step - loss: 2.0852 - accuracy: 0.1938 - val_loss: 2.1288 - val_accuracy: 0.1736\n",
      "Epoch 6/20\n",
      "89/89 [==============================] - 36s 398ms/step - loss: 2.0932 - accuracy: 0.1840 - val_loss: 2.1015 - val_accuracy: 0.1319\n",
      "Epoch 7/20\n",
      "89/89 [==============================] - 15s 172ms/step - loss: 2.0838 - accuracy: 0.1777 - val_loss: 2.1252 - val_accuracy: 0.1852\n",
      "Epoch 8/20\n",
      "89/89 [==============================] - 16s 177ms/step - loss: 2.0773 - accuracy: 0.1952 - val_loss: 2.1047 - val_accuracy: 0.1852\n",
      "Epoch 9/20\n",
      "89/89 [==============================] - 15s 172ms/step - loss: 2.0637 - accuracy: 0.1875 - val_loss: 2.1018 - val_accuracy: 0.2106\n",
      "Epoch 10/20\n",
      "89/89 [==============================] - 16s 185ms/step - loss: 2.0768 - accuracy: 0.1664 - val_loss: 2.1022 - val_accuracy: 0.1597\n",
      "Epoch 11/20\n",
      "89/89 [==============================] - 16s 178ms/step - loss: 2.0946 - accuracy: 0.1917 - val_loss: 2.1039 - val_accuracy: 0.1690\n",
      "Epoch 12/20\n",
      "89/89 [==============================] - 15s 166ms/step - loss: 2.0828 - accuracy: 0.1861 - val_loss: 2.0843 - val_accuracy: 0.2292\n",
      "Epoch 13/20\n",
      "89/89 [==============================] - 16s 182ms/step - loss: 2.0656 - accuracy: 0.1854 - val_loss: 2.0807 - val_accuracy: 0.2130\n",
      "Epoch 14/20\n",
      "89/89 [==============================] - 17s 188ms/step - loss: 2.0759 - accuracy: 0.1868 - val_loss: 2.0784 - val_accuracy: 0.2269\n",
      "Epoch 15/20\n",
      "89/89 [==============================] - 18s 203ms/step - loss: 2.0956 - accuracy: 0.1833 - val_loss: 2.0892 - val_accuracy: 0.1782\n",
      "Epoch 16/20\n",
      "89/89 [==============================] - 15s 173ms/step - loss: 2.0664 - accuracy: 0.1770 - val_loss: 2.1209 - val_accuracy: 0.1644\n",
      "Epoch 17/20\n",
      "89/89 [==============================] - 15s 170ms/step - loss: 2.0537 - accuracy: 0.2015 - val_loss: 2.0419 - val_accuracy: 0.2060\n",
      "Epoch 18/20\n",
      "89/89 [==============================] - 15s 171ms/step - loss: 2.1125 - accuracy: 0.1763 - val_loss: 2.1032 - val_accuracy: 0.2037\n",
      "Epoch 19/20\n",
      "89/89 [==============================] - 15s 171ms/step - loss: 2.0612 - accuracy: 0.1966 - val_loss: 2.0804 - val_accuracy: 0.2199\n",
      "Epoch 20/20\n",
      "89/89 [==============================] - 16s 180ms/step - loss: 2.0649 - accuracy: 0.2051 - val_loss: 2.0799 - val_accuracy: 0.1991\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x2cae8462e50>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit_generator(x_train,steps_per_epoch=89,epochs=20,validation_data=x_test,validation_steps=27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b2864cee",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"vegetable.h5\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
